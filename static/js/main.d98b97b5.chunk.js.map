{"version":3,"sources":["logo.svg","constants/index.js","utils/index.js","reducer/query.js","model/SnackType.js","reducer/ui.js","reducer/index.js","request/index.js","constants/requestUrls.js","action/query.js","model/QueryInput.js","model/QueryTypeEnum.js","utils/prepareResponse.js","components/RadioButtons.js","action/ui.js","components/PrevNext.js","components/DailyCard.js","hooks/useWidthSize.js","components/DailyCards.js","components/BarCharts.js","App.js","store/index.js","reportWebVitals.js","index.js"],"names":["QUERY","CLEAR_QUERY","CLEAR_QUERIES","UPDATE_SPIN","UPDATE_SNACK","SET_UNIT","SET_DATE","APP_ID","LOCATION","updateObject","oldObject","updatedProperties","initialState","test","SnackType","INFO","ERROR","SUCCESS","snack","type","open","message","unit","date","undefined","spin","spinning","tip","rootReducer","combineReducers","query","state","Object","assign","action","addition","result_state","queryName","ui","value","request","axios","create","headers","requestNames","requestUrls","emptySpin","getQuery","getQueryInput","dispatch","Promise","resolve","reject","requestName","saveToStore","requestParams","pathVars","callBackPrepare","storeName","url","forEach","variable","params","get","getRequest","then","res","data","catch","err","notifyError","response","Message","QueryInput","builder","this","queryType","QueryInputBuilder","QueryTypeEnum","POST","GET","prepareForecastList","dateWeatherInfos","list","item","relatedDateInfo","find","info","Date","dt","toLocaleDateString","dateWeatherInfo","temp_min","main","temp_max","avg_temp","temp","hourly","push","length","toFixed","RadioButtons","useDispatch","useSelector","shallowEqual","useEffect","ftqueryInput","withRequestParams","APPID","cnt","q","units","withCallBackPrepare","withSpin","build","RadioGroup","style","justifyContent","margin","row","name","onChange","event","target","FormControlLabel","control","Radio","color","label","PrevNext","className","Forward","DailyCard","props","weatherInfo","Card","variant","onClick","CardContent","fontWeight","fontSize","useWidthSize","useState","widthSize","setWidthSize","handleResize","window","innerWidth","addEventListener","removeEventListener","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","palette","text","secondary","DailyCards","numberOfCards","setNumberOfCards","console","log","Grid","container","width","slice","map","dw","cursor","xs","sm","md","lg","xl","BarCharts","labels","h","toLocaleTimeString","navigator","language","hour","minute","datasets","backgroundColor","options","scaleShowLabels","scales","xAxes","display","ticks","yAxes","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","configureStore","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d98b97b5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//Redux Action Names\r\nexport const QUERY = \"QUERY\";\r\nexport const CLEAR_QUERY = \"CLEAR_QUERY\";\r\nexport const CLEAR_QUERIES = \"CLEAR_QUERIES\";\r\nexport const UPDATE_SPIN = \"UPDATE_SPIN\";\r\nexport const UPDATE_SNACK = \"UPDATE_SNACK\";\r\nexport const SET_UNIT = \"SET_UNIT\";\r\nexport const SET_DATE = \"SET_DATE\";\r\nexport const REQUEST_FAILED = \"Request failed\";\r\n\r\n\r\nexport const APP_ID = \"75f972b80e26f14fe6c920aa6a85ad57\";\r\nexport const LOCATION = \"Munich,de\";\r\nexport const FORECAST_COUNT = 40;\r\n\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {...oldObject, ...updatedProperties};\r\n};","import { QUERY, CLEAR_QUERY, CLEAR_QUERIES } from \"../constants\";\r\nimport { updateObject } from \"../utils\";\r\n\r\nconst initialState = {\r\n    test: \"test1\"\r\n};\r\n\r\nexport default function query(state = Object.assign({}, initialState), action) {\r\n    switch (action.type) {\r\n        case QUERY: return updateObject(state, {...state, ...action.addition});\r\n        case CLEAR_QUERY: {\r\n            let result_state = updateObject(state);\r\n            delete  result_state[action.queryName];\r\n            return result_state;\r\n        }\r\n        case CLEAR_QUERIES: return {};\r\n        default: return state;\r\n    }\r\n}\r\n","const SnackType = {\r\n    INFO: \"Info\",\r\n    ERROR: \"Error\",\r\n    SUCCESS: \"Success\"\r\n}\r\n\r\nexport default SnackType;","import { updateObject } from '../utils';\r\nimport { UPDATE_SPIN, UPDATE_SNACK, SET_UNIT, SET_DATE } from \"../constants\";\r\nimport SnackType from '../model/SnackType';\r\n\r\nconst initialState = {\r\n    snack: {\r\n        type: SnackType.INFO,\r\n        open: false,\r\n        message: \"\",\r\n    },\r\n    unit: \"metric\",\r\n    date: undefined,\r\n    spin: {\r\n        spinning: false,\r\n        tip: null\r\n    }\r\n};\r\n\r\nexport default function ui(state = Object.assign({}, initialState), action) {\r\n    switch (action.type) {\r\n        case UPDATE_SNACK: return updateObject(state, {snack: updateObject(state.snack, action.snack)});\r\n        case UPDATE_SPIN: return updateObject(state, {spin: updateObject(state.spin, action.spin)});\r\n        case SET_UNIT: return updateObject(state, {unit: action.value});\r\n        case SET_DATE: return updateObject(state, {date: action.value});\r\n        default: return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport query from \"./query\";\r\nimport ui from \"./ui\";\r\n\r\nconst rootReducer = combineReducers({query, ui});\r\nexport default rootReducer;","import axios from 'axios';\r\n\r\nconst request = axios.create({\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    }\r\n});\r\nexport function getRequest(url, params) {\r\n    return request.get(url, {params: params});\r\n}\r\n\r\nexport function postRequest(url, data, params) {\r\n    return request.post(url, data, {params:params});\r\n}\r\n","export const requestNames = {\r\n    forecast: \"forecast\"\r\n}\r\n\r\n\r\nexport const requestUrls = {\r\n    [requestNames.forecast] : \"http://api.openweathermap.org/data/2.5/forecast\"\r\n}","/* eslint-disable no-unused-expressions */\r\nimport {getRequest, postRequest} from \"../request\";\r\nimport {CLEAR_QUERIES, CLEAR_QUERY, QUERY, REQUEST_FAILED, UPDATE_SNACK, UPDATE_SPIN} from \"../constants\";\r\nimport SnackType from \"../model/SnackType\";\r\nimport { requestUrls } from \"../constants/requestUrls\";\r\n\r\nconst emptySpin = {\r\n    spinning: false,\r\n    tip: null\r\n};\r\n\r\nexport const getQuery = (getQueryInput) => dispatch =>\r\n    new Promise((resolve, reject) => {\r\n        let {requestName, saveToStore, requestParams, pathVars, callBackPrepare, spin, storeName} = getQueryInput;\r\n        let url = requestUrls[requestName];\r\n        pathVars ? pathVars.forEach(variable => url = url + \"/\" + variable) : null;\r\n        spin ? dispatch({type: UPDATE_SPIN, spin: spin}) : null;\r\n        getRequest(url, requestParams)\r\n            .then(res => {\r\n                saveToStore ?\r\n                    dispatch({\r\n                        type: QUERY,\r\n                        addition: {[storeName ? storeName : requestName]: (callBackPrepare ? callBackPrepare(res.data) : res.data)}\r\n                    }) : null;\r\n                spin ? dispatch({type: UPDATE_SPIN, spin: emptySpin}) : null;\r\n                resolve(res);\r\n            })\r\n            .catch(err => {\r\n                notifyError(err);\r\n                spin ? dispatch({type: UPDATE_SPIN, spin: emptySpin}) : null;\r\n                reject(err);\r\n            })\r\n    });\r\n\r\nexport const postQuery = (postQueryInput) => dispatch =>\r\n    new Promise((resolve, reject) => {\r\n        let {requestName, saveToStore, requestParams, pathVars, callBackPrepare, spin, storeName, data} = postQueryInput;\r\n        let url = requestUrls[requestName];\r\n        pathVars ? pathVars.forEach(variable => url = url + \"/\" + variable) : null;\r\n        spin ? dispatch({type: UPDATE_SPIN, spin: spin}) : null;\r\n        postRequest(url, data, requestParams)\r\n            .then(res => {\r\n                saveToStore ?\r\n                    dispatch({\r\n                        type: QUERY,\r\n                        addition: {[storeName ? storeName : requestName]: (callBackPrepare ? callBackPrepare(res.data) : res.data)}\r\n                    }) : null;\r\n                spin ? dispatch({type: UPDATE_SPIN, spin: emptySpin}) : null;\r\n                resolve(res);\r\n            })\r\n            .catch(err => {\r\n                notifyError(err);\r\n                spin ? dispatch({type: UPDATE_SPIN, spin: emptySpin}) : null;\r\n                reject(err);\r\n            })\r\n    });\r\n\r\nexport const clearQueries = () => {\r\n    return {type: CLEAR_QUERIES}\r\n};\r\n\r\nexport const clearQuery = (queryName) => {\r\n    return {type: CLEAR_QUERY, queryName: queryName}\r\n};\r\n\r\nconst notifyError = (err) => dispatch => {\r\n    if (err && err.response && err.response.data && err.response.data.Message)\r\n        dispatch({type: UPDATE_SNACK, snack:{type:SnackType.ERROR, message: err.response.data.Message}});\r\n    else\r\n        dispatch({type: UPDATE_SNACK, snack:{type:SnackType.ERROR, message: REQUEST_FAILED}});\r\n};\r\n","class QueryInput {\r\n    constructor(builder) {\r\n        this.requestName = builder.requestName;\r\n        this.saveToStore = builder.saveToStore === false ? false : true;\r\n        this.data = builder.data;\r\n        this.requestParams = builder.requestParams;\r\n        this.pathVars = builder.pathVars;\r\n        this.callBackPrepare = builder.callBackPrepare;\r\n        this.spin = builder.spin;\r\n        this.queryType = builder.queryType;\r\n        this.storeName = builder.storeName;\r\n    }\r\n}\r\n\r\nexport default class QueryInputBuilder {\r\n    constructor(requestName, queryType) {\r\n        this.requestName = requestName;\r\n        this.queryType = queryType;\r\n    }\r\n\r\n    withSaveToStore(saveToStore) {\r\n        this.saveToStore = saveToStore;\r\n        return this;\r\n    }\r\n\r\n    withStoreName(storeName) {\r\n        this.storeName = storeName;\r\n        return this;\r\n    }\r\n\r\n    withData(data) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    withRequestParams(requestParams) {\r\n        this.requestParams = requestParams;\r\n        return this;\r\n    }\r\n\r\n    withPathVars(pathVars) {\r\n        this.pathVars = pathVars;\r\n        return this;\r\n    }\r\n\r\n    withCallBackPrepare(callBackPrepare) {\r\n        this.callBackPrepare = callBackPrepare;\r\n        return this;\r\n    }\r\n\r\n    withSpin(spin) {\r\n        this.spin = spin;\r\n        return this;\r\n    }\r\n\r\n\r\n    build() {\r\n        return new QueryInput(this)\r\n    }\r\n}","const QueryTypeEnum = {\r\n    POST: \"post\",\r\n    GET: \"get\"\r\n}\r\n\r\nexport default QueryTypeEnum;","export const prepareForecastList = (data) => {\r\n    let dateWeatherInfos = [];\r\n    data.list.forEach(item => {\r\n        let relatedDateInfo = dateWeatherInfos.find(info => info.date == new Date(item.dt * 1000).toLocaleDateString());\r\n        if (relatedDateInfo == undefined) {\r\n            let dateWeatherInfo = {\r\n\r\n                date: new Date(item.dt * 1000).toLocaleDateString(),\r\n                temp_min: item.main.temp_min,\r\n                temp_max: item.main.temp_max,\r\n                avg_temp: item.main.temp,\r\n                hourly: [{...item.main, dt:item.dt}]\r\n            }\r\n            dateWeatherInfos.push(dateWeatherInfo);\r\n        }\r\n        else {\r\n            if (relatedDateInfo.temp_min > item.main.temp_min)\r\n                relatedDateInfo.temp_min = item.main.temp_min;\r\n            if (relatedDateInfo.temp_max < item.main.temp_max)\r\n                relatedDateInfo.temp_max = item.main.temp_max;\r\n            \r\n            relatedDateInfo.avg_temp += item.main.temp;\r\n            relatedDateInfo.hourly.push({...item.main, dt:item.dt}); \r\n        }\r\n    });\r\n    dateWeatherInfos.forEach(item => {\r\n        item.avg_temp = (item.avg_temp/item.hourly.length).toFixed(2);\r\n    });\r\n    return dateWeatherInfos;\r\n}","import { FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\";\r\nimport { useEffect } from \"react\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { getQuery } from \"../action/query\";\r\nimport { setUnit } from \"../action/ui\";\r\nimport { APP_ID, FORECAST_COUNT, LOCATION } from \"../constants\";\r\nimport { requestNames } from \"../constants/requestUrls\";\r\nimport QueryInputBuilder from \"../model/QueryInput\";\r\nimport QueryTypeEnum from \"../model/QueryTypeEnum\";\r\nimport { prepareForecastList } from \"../utils/prepareResponse\";\r\n\r\nconst RadioButtons = () => {\r\n    const dispatch = useDispatch();\r\n    const unit = useSelector(state => state.ui.unit, shallowEqual);\r\n    useEffect(() => {\r\n        let spin = {\r\n            spinning: true,\r\n            tip: \"Loading\"\r\n        };\r\n        let ftqueryInput = new QueryInputBuilder(requestNames.forecast, QueryTypeEnum.GET)\r\n            .withRequestParams({\r\n                APPID: APP_ID,\r\n                cnt: FORECAST_COUNT,\r\n                q: LOCATION,\r\n                units: unit\r\n            })\r\n            .withCallBackPrepare(prepareForecastList)\r\n            .withSpin(spin)\r\n            .build();\r\n        dispatch(getQuery(ftqueryInput));\r\n    }, [unit])\r\n    return <RadioGroup\r\n        style={{ justifyContent: \"space-around\", margin: \"20px 0px 20px 0px\" }}\r\n        row\r\n        aria-label=\"unit\"\r\n        name=\"unit\"\r\n        value={unit}\r\n        onChange={(event) => {\r\n            dispatch(setUnit(event.target.value));\r\n        }\r\n        }>\r\n        <FormControlLabel value=\"metric\" control={<Radio color=\"primary\" />} label=\"Celciues\" />\r\n        <FormControlLabel value=\"imperial\" control={<Radio color=\"primary\" />} label=\"Fahrenheit\" />\r\n    </RadioGroup>\r\n}\r\n\r\nexport default RadioButtons;","import { SET_UNIT, SET_DATE } from \"../constants\";\r\n\r\nexport const setUnit = (value) => dispatch =>{\r\n    dispatch({ type: SET_UNIT, value });\r\n    return Promise.resolve();\r\n}\r\n\r\nexport const setSelectedDate = (value) => dispatch =>\r\n    dispatch({ type: SET_DATE, value });\r\n","import { Forward } from '@material-ui/icons';\r\nimport { Fragment } from 'react-is';\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { setUnit } from \"../action/ui\";\r\n\r\nconst PrevNext = () => {\r\n    const dispatch = useDispatch();\r\n    const unit = useSelector(state => state.ui.unit, shallowEqual);\r\n    return <Fragment\r\n    >\r\n        <ul className=\"ulIconGruop\">\r\n            <Forward className=\"rotate180 prevNextIcon\"  />\r\n            <Forward className=\"prevNextIcon\" />\r\n        </ul>\r\n    </Fragment>\r\n}\r\n\r\nexport default PrevNext;","import { Card, CardContent, FormLabel, FormControl } from '@material-ui/core';\r\nimport { Forward } from '@material-ui/icons';\r\nimport { Fragment } from 'react-is';\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { setSelectedDate, setUnit } from \"../action/ui\";\r\n\r\nconst DailyCard = (props) => {\r\n    const dispatch = useDispatch();\r\n    const unit = useSelector(state => state.ui.unit, shallowEqual);\r\n    const {weatherInfo} = props;\r\n    return <Fragment\r\n    >\r\n        <Card variant=\"outlined\" onClick={()=>dispatch(setSelectedDate(weatherInfo.date))}>\r\n            <CardContent>\r\n                    <div ><span style={{fontWeight: 600, fontSize:22}}>{weatherInfo.temp_max}</span>{\"/\" + weatherInfo.temp_min}</div>\r\n                    \r\n                    <div >{\"Temp: \" + weatherInfo.avg_temp}</div>\r\n                    \r\n                    <div >{\"Date: \" + weatherInfo.date}</div>\r\n                    \r\n            </CardContent>\r\n        </Card>\r\n    </Fragment>\r\n}\r\n\r\nexport default DailyCard;","import { useState, useEffect } from \"react\";\r\n\r\nfunction useWidthSize() {\r\n    // Initialize state with undefined width\r\n    const [widthSize, setWidthSize] = useState(undefined);\r\n    useEffect(() => {\r\n      // Handler to call on width resize\r\n      function handleResize() {\r\n        // Set window width to state\r\n        setWidthSize(window.innerWidth);\r\n      }\r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      // Call handler right away so state gets updated with initial width size\r\n      handleResize();\r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return widthSize;\r\n  };\r\n\r\n  export default useWidthSize;","import { Grid } from '@material-ui/core';\r\nimport { Forward } from '@material-ui/icons';\r\nimport { Fragment } from 'react-is';\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { getQuery } from \"../action/query\";\r\nimport DailyCard from './DailyCard';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport useWidthSize from '../hooks/useWidthSize';\r\nimport { useState, useEffect } from 'react';\r\nimport QueryInputBuilder from '../model/QueryInput';\r\nimport { requestNames, requestUrls } from '../constants/requestUrls';\r\nimport QueryTypeEnum from '../model/QueryTypeEnum';\r\nimport { APP_ID, FORECAST_COUNT, LOCATION } from '../constants';\r\nimport { prepareForecastList } from '../utils/prepareResponse';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\nconst DailyCards = () => {\r\n    const [numberOfCards, setNumberOfCards] = useState(undefined);\r\n    const dispatch = useDispatch();\r\n    const unit = useSelector(state => state.ui.unit, shallowEqual);\r\n    const dateWeatherInfos = useSelector(state => state.query[requestNames.forecast], shallowEqual);\r\n    const classes = useStyles();\r\n    const widthSize = useWidthSize();\r\n\r\n    useEffect(() => {\r\n        let spin = {\r\n            spinning: true,\r\n            tip: \"Loading\"\r\n        };\r\n        let ftqueryInput = new QueryInputBuilder(requestNames.forecast, QueryTypeEnum.GET)\r\n            .withRequestParams({\r\n                APPID: APP_ID,\r\n                cnt: FORECAST_COUNT,\r\n                q: LOCATION,\r\n                units: unit\r\n            })\r\n            .withCallBackPrepare(prepareForecastList)\r\n            .withSpin(spin)\r\n            .build();\r\n        dispatch(getQuery(ftqueryInput));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(widthSize);\r\n        if (widthSize < 600)\r\n            setNumberOfCards(1);\r\n        else if (widthSize < 960)\r\n            setNumberOfCards(2);\r\n        else if (widthSize < 1280)\r\n            setNumberOfCards(3);\r\n        else if (widthSize < 1920)\r\n            setNumberOfCards(4);\r\n        else\r\n            setNumberOfCards(6);\r\n\r\n    }, [widthSize]); // Empty array ensures that effect is only run on mount\r\n\r\n\r\n\r\n    return <Grid container spacing={0} style={{\r\n        padding: 10,\r\n        width: '100%'\r\n      }}>\r\n        {dateWeatherInfos && dateWeatherInfos.slice(0, numberOfCards).map(dw =>\r\n            <Grid style={{padding:10, cursor:\"pointer\"}} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n                <DailyCard weatherInfo={dw}/>\r\n            </Grid>\r\n        )}\r\n    </Grid>\r\n}\r\n\r\nexport default DailyCards;","import { Grid } from '@material-ui/core';\r\nimport { Forward } from '@material-ui/icons';\r\nimport { Fragment } from 'react-is';\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { getQuery } from \"../action/query\";\r\nimport DailyCard from './DailyCard';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport useWidthSize from '../hooks/useWidthSize';\r\nimport { useState, useEffect } from 'react';\r\nimport QueryInputBuilder from '../model/QueryInput';\r\nimport { requestNames, requestUrls } from '../constants/requestUrls';\r\nimport QueryTypeEnum from '../model/QueryTypeEnum';\r\nimport { APP_ID, FORECAST_COUNT, LOCATION } from '../constants';\r\nimport { prepareForecastList } from '../utils/prepareResponse';\r\nimport { Bar, Chart } from 'react-chartjs-2';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\nconst BarCharts = () => {\r\n    \r\n    const unit = useSelector(state => state.ui.unit, shallowEqual);\r\n    const date = useSelector(state => state.ui.date, shallowEqual);\r\n    \r\n    const dateWeatherInfos = useSelector(state => state.query[requestNames.forecast], shallowEqual);\r\n    \r\n    const dateWeatherInfo = dateWeatherInfos ? dateWeatherInfos.find(item => item.date == date) : undefined;\r\n    const data = {\r\n        labels: dateWeatherInfo ? dateWeatherInfo.hourly.map(h => new Date(h.dt*1000).toLocaleTimeString(navigator.language, {\r\n            hour: '2-digit',\r\n            minute:'2-digit'\r\n          })) : [],\r\n        datasets: [\r\n            {\r\n                label: '# of Red Votes',\r\n                data: dateWeatherInfo ? dateWeatherInfo.hourly.map(h => h.temp) : [],\r\n                backgroundColor: 'rgb(255, 99, 132)',\r\n            }\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        scaleShowLabels : false,\r\n        scales: {\r\n            xAxes: [{\r\n                display: false,\r\n                ticks: {\r\n                    display: false //this will remove only the label\r\n                }\r\n            }],\r\n            yAxes: [{\r\n                display: false,\r\n                ticks: {\r\n                    display: false //this will remove only the label\r\n                }\r\n            }],\r\n        }\r\n    };\r\n    /// Chart.defaults.scale.gridLines.display = false;\r\n\r\n    return <div style={{ padding: 40 }}>\r\n        <Bar style={{ margin: 20 }} data={data} options={options} />\r\n    </div>\r\n}\r\n\r\nexport default BarCharts;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { Provider, useSelector } from \"react-redux\";\r\nimport { configureStore } from \"./store/index\"\r\nimport RadioButtons from './components/RadioButtons';\r\nimport PrevNext from './components/PrevNext';\r\nimport DailyCard from './components/DailyCard';\r\nimport DailyCards from './components/DailyCards';\r\nimport BarCharts from './components/BarCharts';\r\n\r\nconst store = configureStore();\r\n\r\nfunction App() {\r\n\r\n  return <Provider store={store}>\r\n    <RadioButtons/>\r\n    <PrevNext/>\r\n    <DailyCards/>\r\n    <BarCharts/>\r\n  </Provider>;\r\n}\r\n\r\nexport default App;\r\n","import {createStore, applyMiddleware, compose} from 'redux'\r\nimport rootReducer from '../reducer/index';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport function configureStore() {\r\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n    return createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}