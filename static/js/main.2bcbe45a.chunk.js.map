{"version":3,"sources":["logo.svg","constants/index.js","utils/index.js","reducer/query.js","model/SnackType.js","reducer/ui.js","reducer/index.js","request/index.js","constants/requestUrls.js","action/query.js","model/QueryInput.js","model/QueryTypeEnum.js","utils/prepareResponse.js","components/RadioButtons.js","action/ui.js","components/DailyCard.js","hooks/useWidthSize.js","components/DailyCards.js","components/BarCharts.js","components/Dashboard.js","App.js","store/index.js","reportWebVitals.js","index.js"],"names":["QUERY","CLEAR_QUERY","CLEAR_QUERIES","UPDATE_SPIN","UPDATE_SNACK","SET_UNIT","SET_DATE","SET_CARD_FIRST_INDEX","APP_ID","LOCATION","updateObject","oldObject","updatedProperties","initialState","test","SnackType","INFO","ERROR","SUCCESS","snack","type","open","message","unit","date","undefined","cardFirstIndex","spin","rootReducer","combineReducers","query","state","Object","assign","action","addition","result_state","queryName","ui","value","request","axios","create","headers","requestNames","requestUrls","getQuery","getQueryInput","dispatch","Promise","resolve","reject","requestName","saveToStore","requestParams","pathVars","callBackPrepare","storeName","url","forEach","variable","params","get","getRequest","then","res","data","catch","err","notifyError","response","Message","QueryInput","builder","this","queryType","QueryInputBuilder","QueryTypeEnum","POST","GET","prepareForecastList","dateWeatherInfos","list","item","relatedDateInfo","find","info","Date","dt","toLocaleDateString","dateWeatherInfo","temp_min","main","temp_max","avg_temp","temp","hourly","push","length","toFixed","console","log","RadioButtons","useDispatch","useSelector","shallowEqual","useEffect","ftqueryInput","withRequestParams","APPID","cnt","q","units","withCallBackPrepare","withSpin","spinning","tip","build","RadioGroup","style","justifyContent","margin","row","name","onChange","event","target","FormControlLabel","control","Radio","color","label","DailyCard","props","weatherInfo","Card","variant","cursor","backgroundColor","onClick","CardContent","fontWeight","fontSize","useWidthSize","useState","widthSize","setWidthSize","handleResize","window","innerWidth","addEventListener","removeEventListener","DailyCards","numberOfCards","setNumberOfCards","setCardFirstIndex","className","Forward","Grid","container","spacing","padding","width","slice","map","dw","xs","sm","md","lg","xl","BarCharts","labels","h","toLocaleTimeString","navigator","language","hour","minute","datasets","textAlign","Dashboard","CircularProgress","title","store","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","configureStore","muiTheme","createTheme","palette","primary","secondary","App","ThemeProvider","theme","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2bcbe45a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","//Redux Action Names\r\nexport const QUERY = \"QUERY\";\r\nexport const CLEAR_QUERY = \"CLEAR_QUERY\";\r\nexport const CLEAR_QUERIES = \"CLEAR_QUERIES\";\r\nexport const UPDATE_SPIN = \"UPDATE_SPIN\";\r\nexport const UPDATE_SNACK = \"UPDATE_SNACK\";\r\nexport const SET_UNIT = \"SET_UNIT\";\r\nexport const SET_DATE = \"SET_DATE\";\r\nexport const SET_CARD_FIRST_INDEX = \"SET_CARD_FIRST_INDEX\";\r\nexport const REQUEST_FAILED = \"Request failed\";\r\n\r\n\r\nexport const APP_ID = \"75f972b80e26f14fe6c920aa6a85ad57\";\r\nexport const LOCATION = \"Munich,de\";\r\nexport const FORECAST_COUNT = 40;\r\n\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {...oldObject, ...updatedProperties};\r\n};","import { QUERY, CLEAR_QUERY, CLEAR_QUERIES } from \"../constants\";\r\nimport { updateObject } from \"../utils\";\r\n\r\nconst initialState = {\r\n    test: \"test1\"\r\n};\r\n\r\nexport default function query(state = Object.assign({}, initialState), action) {\r\n    switch (action.type) {\r\n        case QUERY: return updateObject(state, {...state, ...action.addition});\r\n        case CLEAR_QUERY: {\r\n            let result_state = updateObject(state);\r\n            delete  result_state[action.queryName];\r\n            return result_state;\r\n        }\r\n        case CLEAR_QUERIES: return {};\r\n        default: return state;\r\n    }\r\n}\r\n","const SnackType = {\r\n    INFO: \"Info\",\r\n    ERROR: \"Error\",\r\n    SUCCESS: \"Success\"\r\n}\r\n\r\nexport default SnackType;","import { updateObject } from '../utils';\r\nimport { UPDATE_SPIN, UPDATE_SNACK, SET_UNIT, SET_DATE, SET_CARD_FIRST_INDEX } from \"../constants\";\r\nimport SnackType from '../model/SnackType';\r\n\r\nconst initialState = {\r\n    snack: {\r\n        type: SnackType.INFO,\r\n        open: false,\r\n        message: \"\",\r\n    },\r\n    unit: \"metric\",\r\n    date: undefined,\r\n    cardFirstIndex: 0,\r\n    spin: false\r\n};\r\n\r\nexport default function ui(state = Object.assign({}, initialState), action) {\r\n    switch (action.type) {\r\n        case UPDATE_SNACK: return updateObject(state, {snack: updateObject(state.snack, action.snack)});\r\n        case UPDATE_SPIN: return updateObject(state, {spin: action.spin});\r\n        case SET_UNIT: return updateObject(state, {unit: action.value});\r\n        case SET_DATE: return updateObject(state, {date: action.value});\r\n        case SET_CARD_FIRST_INDEX: return updateObject(state, {cardFirstIndex: action.value});\r\n\r\n        default: return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport query from \"./query\";\r\nimport ui from \"./ui\";\r\n\r\nconst rootReducer = combineReducers({query, ui});\r\nexport default rootReducer;","import axios from 'axios';\r\n\r\nconst request = axios.create({\r\n    headers: {\r\n        \"Content-Type\": \"application/json\",\r\n    }\r\n});\r\nexport function getRequest(url, params) {\r\n    return request.get(url, {params: params});\r\n}\r\n\r\nexport function postRequest(url, data, params) {\r\n    return request.post(url, data, {params:params});\r\n}\r\n","export const requestNames = {\r\n    forecast: \"forecast\"\r\n}\r\n\r\n\r\nexport const requestUrls = {\r\n    [requestNames.forecast] : \"https://api.openweathermap.org/data/2.5/forecast\"\r\n}","/* eslint-disable no-unused-expressions */\r\nimport {getRequest, postRequest} from \"../request\";\r\nimport {CLEAR_QUERIES, CLEAR_QUERY, QUERY, REQUEST_FAILED, UPDATE_SNACK, UPDATE_SPIN} from \"../constants\";\r\nimport SnackType from \"../model/SnackType\";\r\nimport { requestUrls } from \"../constants/requestUrls\";\r\n\r\nexport const getQuery = (getQueryInput) => dispatch =>\r\n    new Promise((resolve, reject) => {\r\n        let {requestName, saveToStore, requestParams, pathVars, callBackPrepare, spin, storeName} = getQueryInput;\r\n        let url = requestUrls[requestName];\r\n        pathVars ? pathVars.forEach(variable => url = url + \"/\" + variable) : null;\r\n        spin ? dispatch({type: UPDATE_SPIN, spin: spin}) : null;\r\n        getRequest(url, requestParams)\r\n            .then(res => {\r\n                saveToStore ?\r\n                    dispatch({\r\n                        type: QUERY,\r\n                        addition: {[storeName ? storeName : requestName]: (callBackPrepare ? callBackPrepare(res.data) : res.data)}\r\n                    }) : null;\r\n                spin ? dispatch({type: UPDATE_SPIN, spin: false}) : null;\r\n                resolve(res);\r\n            })\r\n            .catch(err => {\r\n                notifyError(err);\r\n                spin ? dispatch({type: UPDATE_SPIN, spin: false}) : null;\r\n                reject(err);\r\n            })\r\n    });\r\n\r\nexport const postQuery = (postQueryInput) => dispatch =>\r\n    new Promise((resolve, reject) => {\r\n        let {requestName, saveToStore, requestParams, pathVars, callBackPrepare, spin, storeName, data} = postQueryInput;\r\n        let url = requestUrls[requestName];\r\n        pathVars ? pathVars.forEach(variable => url = url + \"/\" + variable) : null;\r\n        spin ? dispatch({type: UPDATE_SPIN, spin: spin}) : null;\r\n        postRequest(url, data, requestParams)\r\n            .then(res => {\r\n                saveToStore ?\r\n                    dispatch({\r\n                        type: QUERY,\r\n                        addition: {[storeName ? storeName : requestName]: (callBackPrepare ? callBackPrepare(res.data) : res.data)}\r\n                    }) : null;\r\n                spin ? dispatch({type: UPDATE_SPIN, spin: false}) : null;\r\n                resolve(res);\r\n            })\r\n            .catch(err => {\r\n                notifyError(err);\r\n                spin ? dispatch({type: UPDATE_SPIN, spin: false}) : null;\r\n                reject(err);\r\n            })\r\n    });\r\n\r\nexport const clearQueries = () => {\r\n    return {type: CLEAR_QUERIES}\r\n};\r\n\r\nexport const clearQuery = (queryName) => {\r\n    return {type: CLEAR_QUERY, queryName: queryName}\r\n};\r\n\r\nconst notifyError = (err) => dispatch => {\r\n    if (err && err.response && err.response.data && err.response.data.Message)\r\n        dispatch({type: UPDATE_SNACK, snack:{type:SnackType.ERROR, message: err.response.data.Message}});\r\n    else\r\n        dispatch({type: UPDATE_SNACK, snack:{type:SnackType.ERROR, message: REQUEST_FAILED}});\r\n};\r\n","class QueryInput {\r\n    constructor(builder) {\r\n        this.requestName = builder.requestName;\r\n        this.saveToStore = builder.saveToStore === false ? false : true;\r\n        this.data = builder.data;\r\n        this.requestParams = builder.requestParams;\r\n        this.pathVars = builder.pathVars;\r\n        this.callBackPrepare = builder.callBackPrepare;\r\n        this.spin = builder.spin;\r\n        this.queryType = builder.queryType;\r\n        this.storeName = builder.storeName;\r\n    }\r\n}\r\n\r\nexport default class QueryInputBuilder {\r\n    constructor(requestName, queryType) {\r\n        this.requestName = requestName;\r\n        this.queryType = queryType;\r\n    }\r\n\r\n    withSaveToStore(saveToStore) {\r\n        this.saveToStore = saveToStore;\r\n        return this;\r\n    }\r\n\r\n    withStoreName(storeName) {\r\n        this.storeName = storeName;\r\n        return this;\r\n    }\r\n\r\n    withData(data) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    withRequestParams(requestParams) {\r\n        this.requestParams = requestParams;\r\n        return this;\r\n    }\r\n\r\n    withPathVars(pathVars) {\r\n        this.pathVars = pathVars;\r\n        return this;\r\n    }\r\n\r\n    withCallBackPrepare(callBackPrepare) {\r\n        this.callBackPrepare = callBackPrepare;\r\n        return this;\r\n    }\r\n\r\n    withSpin() {\r\n        this.spin = true;\r\n        return this;\r\n    }\r\n\r\n\r\n    build() {\r\n        return new QueryInput(this)\r\n    }\r\n}","const QueryTypeEnum = {\r\n    POST: \"post\",\r\n    GET: \"get\"\r\n}\r\n\r\nexport default QueryTypeEnum;","export const prepareForecastList = (data) => {\r\n    let dateWeatherInfos = [];\r\n    data.list.forEach(item => {\r\n        let relatedDateInfo = dateWeatherInfos.find(info => info.date == new Date(item.dt * 1000).toLocaleDateString());\r\n        if (relatedDateInfo == undefined) {\r\n            let dateWeatherInfo = {\r\n\r\n                date: new Date(item.dt * 1000).toLocaleDateString(),\r\n                temp_min: item.main.temp_min,\r\n                temp_max: item.main.temp_max,\r\n                avg_temp: item.main.temp,\r\n                hourly: [{...item.main, dt:item.dt}]\r\n            }\r\n            dateWeatherInfos.push(dateWeatherInfo);\r\n        }\r\n        else {\r\n            if (relatedDateInfo.temp_min > item.main.temp_min)\r\n                relatedDateInfo.temp_min = item.main.temp_min;\r\n            if (relatedDateInfo.temp_max < item.main.temp_max)\r\n                relatedDateInfo.temp_max = item.main.temp_max;\r\n            \r\n            relatedDateInfo.avg_temp += item.main.temp;\r\n            relatedDateInfo.hourly.push({...item.main, dt:item.dt}); \r\n        }\r\n    });\r\n    dateWeatherInfos.forEach(item => {\r\n        item.avg_temp = (item.avg_temp/item.hourly.length).toFixed(2);\r\n    });\r\n    console.log(dateWeatherInfos);\r\n    return dateWeatherInfos;\r\n}","import { FormControlLabel, Radio, RadioGroup } from \"@material-ui/core\";\r\nimport { useEffect } from \"react\";\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { getQuery } from \"../action/query\";\r\nimport { setUnit } from \"../action/ui\";\r\nimport { APP_ID, FORECAST_COUNT, LOCATION } from \"../constants\";\r\nimport { requestNames } from \"../constants/requestUrls\";\r\nimport QueryInputBuilder from \"../model/QueryInput\";\r\nimport QueryTypeEnum from \"../model/QueryTypeEnum\";\r\nimport { prepareForecastList } from \"../utils/prepareResponse\";\r\n\r\nconst RadioButtons = () => {\r\n    const dispatch = useDispatch();\r\n    const unit = useSelector(state => state.ui.unit, shallowEqual);\r\n    useEffect(() => {\r\n        let spin = {\r\n            spinning: true,\r\n            tip: \"Loading\"\r\n        };\r\n        let ftqueryInput = new QueryInputBuilder(requestNames.forecast, QueryTypeEnum.GET)\r\n            .withRequestParams({\r\n                APPID: APP_ID,\r\n                cnt: FORECAST_COUNT,\r\n                q: LOCATION,\r\n                units: unit\r\n            })\r\n            .withCallBackPrepare(prepareForecastList)\r\n            .withSpin(spin)\r\n            .build();\r\n        dispatch(getQuery(ftqueryInput));\r\n    }, [unit])\r\n    return <RadioGroup\r\n        style={{ justifyContent: \"space-around\", margin: \"20px 0px 20px 0px\" }}\r\n        row\r\n        aria-label=\"unit\"\r\n        name=\"unit\"\r\n        value={unit}\r\n        onChange={(event) => {\r\n            dispatch(setUnit(event.target.value));\r\n        }\r\n        }>\r\n        <FormControlLabel value=\"metric\" control={<Radio color=\"primary\" />} label=\"Celciues\" />\r\n        <FormControlLabel value=\"imperial\" control={<Radio color=\"primary\" />} label=\"Fahrenheit\" />\r\n    </RadioGroup>\r\n}\r\n\r\nexport default RadioButtons;","import { SET_UNIT, SET_DATE, SET_CARD_FIRST_INDEX } from \"../constants\";\r\n\r\nexport const setUnit = (value) => dispatch =>{\r\n    dispatch({ type: SET_UNIT, value });\r\n    return Promise.resolve();\r\n}\r\n\r\nexport const setSelectedDate = (value) => dispatch =>\r\n    dispatch({ type: SET_DATE, value });\r\n\r\n","import { Card, CardContent } from '@material-ui/core';\r\nimport { Fragment } from 'react-is';\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { setSelectedDate } from \"../action/ui\";\r\n\r\nconst DailyCard = (props) => {\r\n    const dispatch = useDispatch();\r\n    const date = useSelector(state => state.ui.date, shallowEqual);\r\n    const { weatherInfo } = props;\r\n    return <Fragment>\r\n        <Card variant=\"outlined\" style={date == weatherInfo.date ? { cursor: \"pointer\", backgroundColor: \"#efb59e\" } : { cursor: \"pointer\" }} onClick={() => dispatch(setSelectedDate(weatherInfo.date))}>\r\n            <CardContent>\r\n                <div ><span style={{ fontWeight: 600, fontSize: 22 }}>{weatherInfo.temp_max}</span>{\"/\" + weatherInfo.temp_min}</div>\r\n                <div >{\"Temp: \" + weatherInfo.avg_temp}</div>\r\n                <div >{\"Date: \" + weatherInfo.date}</div>\r\n            </CardContent>\r\n        </Card>\r\n    </Fragment>\r\n}\r\n\r\nexport default DailyCard;","import { useState, useEffect } from \"react\";\r\n\r\nfunction useWidthSize() {\r\n    // Initialize state with undefined width\r\n    const [widthSize, setWidthSize] = useState(undefined);\r\n    useEffect(() => {\r\n      // Handler to call on width resize\r\n      function handleResize() {\r\n        // Set window width to state\r\n        setWidthSize(window.innerWidth);\r\n      }\r\n      // Add event listener\r\n      window.addEventListener(\"resize\", handleResize);\r\n      // Call handler right away so state gets updated with initial width size\r\n      handleResize();\r\n      // Remove event listener on cleanup\r\n      return () => window.removeEventListener(\"resize\", handleResize);\r\n    }, []); // Empty array ensures that effect is only run on mount\r\n    return widthSize;\r\n  };\r\n\r\n  export default useWidthSize;","import { Grid } from '@material-ui/core';\r\nimport { Forward } from '@material-ui/icons';\r\nimport { Fragment } from 'react-is';\r\nimport { shallowEqual, useDispatch, useSelector } from \"react-redux\";\r\nimport { getQuery } from \"../action/query\";\r\nimport DailyCard from './DailyCard';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport useWidthSize from '../hooks/useWidthSize';\r\nimport { useState, useEffect } from 'react';\r\nimport QueryInputBuilder from '../model/QueryInput';\r\nimport { requestNames } from '../constants/requestUrls';\r\nimport QueryTypeEnum from '../model/QueryTypeEnum';\r\nimport { APP_ID, FORECAST_COUNT, LOCATION } from '../constants';\r\nimport { prepareForecastList } from '../utils/prepareResponse';\r\n\r\nconst DailyCards = () => {\r\n    const [numberOfCards, setNumberOfCards] = useState(undefined);\r\n    const [cardFirstIndex, setCardFirstIndex] = useState(0);\r\n\r\n    const dispatch = useDispatch();\r\n    const unit = useSelector(state => state.ui.unit, shallowEqual);\r\n    const dateWeatherInfos = useSelector(state => state.query[requestNames.forecast], shallowEqual);\r\n    const widthSize = useWidthSize();\r\n\r\n    useEffect(() => {\r\n        let ftqueryInput = new QueryInputBuilder(requestNames.forecast, QueryTypeEnum.GET)\r\n            .withRequestParams({\r\n                APPID: APP_ID,\r\n                cnt: FORECAST_COUNT,\r\n                q: LOCATION,\r\n                units: unit\r\n            })\r\n            .withCallBackPrepare(prepareForecastList)\r\n            .withSpin()\r\n            .build();\r\n        dispatch(getQuery(ftqueryInput));\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log(widthSize);\r\n        if (widthSize < 600)\r\n            setNumberOfCards(1);\r\n        else if (widthSize < 960)\r\n            setNumberOfCards(2);\r\n        else if (widthSize < 1280)\r\n            setNumberOfCards(3);\r\n        else if (widthSize < 1920)\r\n            setNumberOfCards(4);\r\n        else\r\n            setNumberOfCards(6);\r\n\r\n    }, [widthSize]); // Empty array ensures that effect is only run on mount\r\n\r\n    return <Fragment>\r\n        {dateWeatherInfos && <ul className=\"ulIconGruop\" style={cardFirstIndex == 0 ? { justifyContent: \"flex-end\" } : {}}>\r\n            {cardFirstIndex != 0 && <Forward className=\"rotate180 prevNextIcon\" onClick={() => setCardFirstIndex(cardFirstIndex - 1)} />}\r\n            {cardFirstIndex + numberOfCards < dateWeatherInfos.length && <Forward className=\"prevNextIcon\" onClick={() => setCardFirstIndex(cardFirstIndex + 1)} />}\r\n        </ul>}\r\n        <Grid container spacing={0} style={{\r\n            padding: 10,\r\n            width: '100%'\r\n        }}>\r\n            {dateWeatherInfos && dateWeatherInfos.slice(cardFirstIndex, cardFirstIndex + numberOfCards).map(dw =>\r\n                <Grid style={{ padding: 10 }} item xs={12} sm={6} md={4} lg={3} xl={2}>\r\n                    <DailyCard weatherInfo={dw} />\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    </Fragment>\r\n}\r\n\r\nexport default DailyCards;","\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport { requestNames } from '../constants/requestUrls';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst BarCharts = () => {\r\n    const date = useSelector(state => state.ui.date, shallowEqual);\r\n    const dateWeatherInfos = useSelector(state => state.query[requestNames.forecast], shallowEqual);\r\n\r\n    const dateWeatherInfo = dateWeatherInfos ? dateWeatherInfos.find(item => item.date == date) : undefined;\r\n    const data = {\r\n        labels: dateWeatherInfo ? dateWeatherInfo.hourly.map(h => new Date(h.dt * 1000).toLocaleTimeString(navigator.language, {\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n        })) : [],\r\n        datasets: [\r\n            {\r\n                label: 'Hourly Temperature - ' + date,\r\n                data: dateWeatherInfo ? dateWeatherInfo.hourly.map(h => h.temp) : [],\r\n                backgroundColor: '#ff4800',\r\n            }\r\n        ],\r\n    };\r\n\r\n    return <div style={{ padding: 40 }}>\r\n        {date ? <Bar style={{ margin: 20 }} data={data} /> :\r\n            <div style={{ textAlign: \"center\" }}>Please select a date to see hourly temperature</div>}\r\n    </div>\r\n}\r\n\r\nexport default BarCharts;","import { CircularProgress } from \"@material-ui/core\";\r\nimport { Fragment } from \"react\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport BarCharts from \"./BarCharts\";\r\nimport DailyCards from \"./DailyCards\";\r\nimport RadioButtons from \"./RadioButtons\";\r\n\r\n\r\nconst Dashboard = () => {\r\n    const spin = useSelector(state => state.ui.spin, shallowEqual);\r\n\r\n\r\n    return <Fragment>\r\n        {spin && <div className=\"spinLoading\"> <CircularProgress title=\"Loading\"/></div>}\r\n        <RadioButtons />\r\n      <DailyCards />\r\n      <BarCharts />\r\n    </Fragment>\r\n}\r\n\r\nexport default Dashboard;","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { Provider, useSelector } from \"react-redux\";\r\nimport { configureStore } from \"./store/index\"\r\nimport RadioButtons from './components/RadioButtons';\r\nimport DailyCard from './components/DailyCard';\r\nimport DailyCards from './components/DailyCards';\r\nimport BarCharts from './components/BarCharts';\r\nimport { createTheme, ThemeProvider } from '@material-ui/core';\r\nimport Dashboard from './components/Dashboard';\r\n\r\nconst store = configureStore();\r\nconst theme = {\r\n  palette: {\r\n    primary: { main: \"#ff4800\" }, \r\n    secondary: { main: '#ff4800' }, \r\n  },\r\n};\r\nconst muiTheme = createTheme(theme);\r\nfunction App() {\r\n\r\n  return <Provider store={store}>\r\n    <ThemeProvider theme={muiTheme}>\r\n      <Dashboard/>\r\n    </ThemeProvider>\r\n  </Provider>;\r\n}\r\n\r\nexport default App;\r\n","import {createStore, applyMiddleware, compose} from 'redux'\r\nimport rootReducer from '../reducer/index';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport function configureStore() {\r\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n    return createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}